// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Chat {
  pkId                      BigInt   @id @default(autoincrement())
  sessionId                 String
  archived                  Boolean?
  conversationTimestamp     Int?
  createdAt                 Json?
  createdBy                 String?
  displayName               String?
  endOfHistoryTransfer      Boolean?
  endOfHistoryTransferType  Int?
  ephemeralExpiration       Int?
  ephemeralSettingTimestamp Json?
  id                        String
  isDefaultSubgroup         Boolean?
  isParentGroup             Boolean?
  lastMsgTimestamp          Json?
  lidJid                    String?
  markedAsUnread            Boolean?
  mediaVisibility           Int?
  messages                  Json?
  muteEndTime               Json?
  name                      String?
  newJid                    String?
  notSpam                   Boolean?
  oldJid                    String?
  pHash                     String?
  parentGroupId             String?
  pinned                    Int?
  pnJid                     String?
  pnhDuplicateLidThread     Boolean?
  readOnly                  Boolean?
  shareOwnPn                Boolean?
  support                   Boolean?
  suspended                 Boolean?
  tcTokenSenderTimestamp    Json?
  tcTokenTimestamp          Json?
  terminated                Boolean?
  unreadCount               Int?
  unreadMentionCount        Int?
  lastMessageRecvTimestamp  Int?

  @@unique([sessionId, id], map: "unique_id_per_session_id_chat")
  @@index([sessionId])
}

model Contact {
  pkId         BigInt  @id @default(autoincrement())
  sessionId    String
  id           String
  name         String?
  notify       String?
  verifiedName String?
  imgUrl       String?
  status       String?

  @@unique([sessionId, id], map: "unique_id_per_session_id_contact")
  @@index([sessionId])
}

model Message {
  pkId                            BigInt   @id @default(autoincrement())
  sessionId                       String
  remoteJid                       String
  id                              String
  agentId                         String?
  bizPrivacyStatus                Int?
  broadcast                       Boolean?
  clearMedia                      Boolean?
  duration                        Int?
  ephemeralDuration               Int?
  ephemeralOffToOn                Boolean?
  ephemeralOutOfSync              Boolean?
  ephemeralStartTimestamp         Json?
  finalLiveLocation               Json?
  futureproofData                 Bytes?
  ignore                          Boolean?
  keepInChat                      Json?
  key                             Json
  labels                          Json?
  mediaCiphertextSha256           Bytes?
  mediaData                       Json?
  message                         Json?
  messageC2STimestamp             Int?
  messageSecret                   Bytes?
  messageStubParameters           Json?
  messageStubType                 Int?
  messageTimestamp                Int?
  multicast                       Boolean?
  originalSelfAuthorUserJidString String?
  participant                     String?
  paymentInfo                     Json?
  photoChange                     Json?
  pollAdditionalMetadata          Json?
  pollUpdates                     Json?
  pushName                        String?
  quotedPaymentInfo               Json?
  quotedStickerData               Json?
  reactions                       Json?
  revokeMessageTimestamp          Int?
  starred                         Boolean?
  status                          Int?
  statusAlreadyViewed             Boolean?
  statusPsa                       Json?
  urlNumber                       Boolean?
  urlText                         Boolean?
  userReceipt                     Json?
  verifiedBizName                 String?
  eventResponses                  Json?

  @@unique([sessionId, remoteJid, id], map: "unique_message_key_per_session_id")
  @@index([sessionId])
}

model Session {
  pkId      BigInt @id @default(autoincrement())
  sessionId String
  id        String
  data      String @db.Text

  @@unique([sessionId, id], map: "unique_id_per_session_id_session")
  @@index([sessionId])
}
